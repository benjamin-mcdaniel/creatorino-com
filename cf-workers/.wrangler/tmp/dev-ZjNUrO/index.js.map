{
  "version": 3,
  "sources": ["../bundle-UQdGba/checked-fetch.js", "../../../common/utils.js", "../../../profile/index.js", "../../../youtube/index.js", "../../../index.js", "../../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-UQdGba/middleware-insertion-facade.js", "../../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/middleware/common.ts", "../bundle-UQdGba/middleware-loader.entry.ts"],
  "sourceRoot": "C:\\Users\\benja\\Repo\\creatorino.com\\cf-workers\\.wrangler\\tmp\\dev-ZjNUrO",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "/**\r\n * Common utilities for Cloudflare Workers API\r\n */\r\n\r\n// Supabase client creation with environment parameters\r\nexport function createSupabaseClient(env) {\r\n    // Access environment variables from the env parameter\r\n    const SUPABASE_URL = env.SUPABASE_URL || '';\r\n    const SUPABASE_KEY = env.SUPABASE_KEY || '';\r\n    \r\n    // Verify that environment variables are properly set\r\n    if (!SUPABASE_URL || !SUPABASE_KEY) {\r\n      throw new Error('Supabase environment variables are not properly configured');\r\n    }\r\n    \r\n    return {\r\n      auth: {\r\n        getUser: async (token) => {\r\n          const response = await fetch(`${SUPABASE_URL}/auth/v1/user`, {\r\n            headers: {\r\n              'Authorization': `Bearer ${token}`,\r\n              'apikey': SUPABASE_KEY\r\n            }\r\n          });\r\n          \r\n          if (!response.ok) throw new Error('Failed to get user');\r\n          return response.json();\r\n        }\r\n      },\r\n      from: (table) => {\r\n        return {\r\n          select: (columns = '*') => {\r\n            let params = new URLSearchParams();\r\n            if (columns !== '*') params.append('select', columns);\r\n            \r\n            return {\r\n              eq: async (column, value) => {\r\n                params.append(`${column}`, `eq.${value}`);\r\n                \r\n                const response = await fetch(`${SUPABASE_URL}/rest/v1/${table}?${params.toString()}`, {\r\n                  headers: {\r\n                    'apikey': SUPABASE_KEY,\r\n                    'Content-Type': 'application/json'\r\n                  }\r\n                });\r\n                \r\n                if (!response.ok) throw new Error(`Failed to query ${table}`);\r\n                return { data: await response.json(), error: null };\r\n              },\r\n              single: function() {\r\n                params.append('limit', '1');\r\n                return this;\r\n              }\r\n            };\r\n          },\r\n          update: (data) => {\r\n            return {\r\n              eq: async (column, value) => {\r\n                const response = await fetch(`${SUPABASE_URL}/rest/v1/${table}?${column}=eq.${value}`, {\r\n                  method: 'PATCH',\r\n                  headers: {\r\n                    'apikey': SUPABASE_KEY,\r\n                    'Content-Type': 'application/json'\r\n                  },\r\n                  body: JSON.stringify(data)\r\n                });\r\n                \r\n                if (!response.ok) throw new Error(`Failed to update ${table}`);\r\n                return { data: await response.json(), error: null };\r\n              }\r\n            };\r\n          },\r\n          insert: async (data) => {\r\n            const response = await fetch(`${SUPABASE_URL}/rest/v1/${table}`, {\r\n              method: 'POST',\r\n              headers: {\r\n                'apikey': SUPABASE_KEY,\r\n                'Content-Type': 'application/json',\r\n                'Prefer': 'return=representation'\r\n              },\r\n              body: JSON.stringify(data)\r\n            });\r\n            \r\n            if (!response.ok) throw new Error(`Failed to insert into ${table}`);\r\n            return { data: await response.json(), error: null };\r\n          }\r\n        };\r\n      },\r\n      storage: {\r\n        from: (bucket) => {\r\n          return {\r\n            upload: async (path, file) => {\r\n              const response = await fetch(`${SUPABASE_URL}/storage/v1/object/${bucket}/${path}`, {\r\n                method: 'POST',\r\n                headers: {\r\n                  'apikey': SUPABASE_KEY,\r\n                  'Content-Type': file.type\r\n                },\r\n                body: file\r\n              });\r\n              \r\n              if (!response.ok) throw new Error('Failed to upload file');\r\n              return { data: await response.json(), error: null };\r\n            },\r\n            getPublicUrl: (path) => {\r\n              return {\r\n                data: {\r\n                  publicUrl: `${SUPABASE_URL}/storage/v1/object/public/${bucket}/${path}`\r\n                },\r\n                error: null\r\n              };\r\n            }\r\n          };\r\n        }\r\n      }\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Extract user ID from authentication token in request\r\n   */\r\n  export async function getUserIdFromToken(request, env) {\r\n    // Get token from Authorization header\r\n    const authHeader = request.headers.get('Authorization');\r\n    let token = null;\r\n    \r\n    if (authHeader && authHeader.startsWith('Bearer ')) {\r\n      token = authHeader.substring(7);\r\n    }\r\n    \r\n    if (!token) {\r\n      throw new Error('Unauthorized');\r\n    }\r\n    \r\n    // Get user from token\r\n    const supabase = createSupabaseClient(env);\r\n    const { data: userData } = await supabase.auth.getUser(token);\r\n    \r\n    if (!userData?.user) {\r\n      throw new Error('No user found');\r\n    }\r\n    \r\n    return userData.user.id;\r\n  }\r\n  \r\n  /**\r\n   * Standard response headers\r\n   */\r\n  export const standardHeaders = {\r\n    'Content-Type': 'application/json',\r\n    'Access-Control-Allow-Origin': '*'\r\n  };\r\n  \r\n  /**\r\n   * Create a standard JSON response\r\n   */\r\n  export function jsonResponse(data, status = 200) {\r\n    return new Response(JSON.stringify(data), {\r\n      status,\r\n      headers: standardHeaders\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Create an error response\r\n   */\r\n  export function errorResponse(message, status = 500) {\r\n    return jsonResponse({ error: message }, status);\r\n  }", "/**\r\n * Profile API Module\r\n * \r\n * Handles server-side profile operations that were previously done on the client.\r\n */\r\n\r\nimport { \r\n  createSupabaseClient, \r\n  getUserIdFromToken,\r\n  jsonResponse,\r\n  errorResponse\r\n} from '../common/utils.js';\r\n\r\n/**\r\n * Fetch the profile of a user\r\n */\r\nasync function fetchUserProfile(userId, env) {\r\n  try {\r\n    const supabase = createSupabaseClient(env);\r\n    \r\n    // Try to fetch existing profile\r\n    const existingProfile = await supabase\r\n      .from('profiles')\r\n      .select('*')\r\n      .eq('id', userId)\r\n      .single();\r\n      \r\n    // If profile exists, return it\r\n    if (existingProfile && existingProfile.length > 0) {\r\n      return { data: existingProfile[0], error: null };\r\n    }\r\n    \r\n    // Profile doesn't exist, create a new one\r\n    console.log('Creating new profile for user', userId);\r\n    \r\n    const newProfile = {\r\n      id: userId,\r\n      first_name: '',\r\n      last_name: '',\r\n      nickname: '', // You would need the email from auth context\r\n      bio: '',\r\n      avatar_url: '',\r\n      updated_at: new Date().toISOString()\r\n    };\r\n    \r\n    const createdProfile = await supabase\r\n      .from('profiles')\r\n      .insert([newProfile]);\r\n      \r\n    return { data: createdProfile[0], error: null };\r\n  } catch (error) {\r\n    console.error('Error with profile:', error.message);\r\n    return { data: null, error };\r\n  }\r\n}\r\n\r\n/**\r\n * Update the profile of a user\r\n */\r\nasync function updateUserProfile(userId, updates, env) {\r\n  try {\r\n    const supabase = createSupabaseClient(env);\r\n    \r\n    // Add updated_at timestamp\r\n    const updatedData = {\r\n      ...updates,\r\n      updated_at: new Date().toISOString()\r\n    };\r\n    \r\n    const result = await supabase\r\n      .from('profiles')\r\n      .update(updatedData)\r\n      .eq('id', userId);\r\n      \r\n    return { data: result[0], error: null };\r\n  } catch (error) {\r\n    console.error('Error updating profile:', error.message);\r\n    return { data: null, error };\r\n  }\r\n}\r\n\r\n/**\r\n * Handle profile API requests\r\n * Export this function to be used by the main router\r\n */\r\nexport async function handleRequest(request, env, ctx) {\r\n  try {\r\n    // Get authenticated user ID\r\n    const userId = await getUserIdFromToken(request, env);\r\n    \r\n    // Handle profile endpoints\r\n    if (request.method === 'GET') {\r\n      const result = await fetchUserProfile(userId, env);\r\n      return jsonResponse(result);\r\n    } \r\n    else if (request.method === 'PUT') {\r\n      const updates = await request.json();\r\n      const result = await updateUserProfile(userId, updates, env);\r\n      return jsonResponse(result);\r\n    }\r\n    \r\n    // Method not allowed\r\n    return errorResponse('Method not allowed', 405);\r\n  } catch (error) {\r\n    // Handle errors based on type\r\n    if (error.message === 'Unauthorized') {\r\n      return errorResponse('Unauthorized', 401);\r\n    }\r\n    \r\n    return errorResponse(error.message, 500);\r\n  }\r\n}", "/**\r\n * YouTube API Module\r\n * \r\n * Handles YouTube integration and analytics\r\n */\r\n\r\nimport { \r\n  getUserIdFromToken,\r\n  jsonResponse,\r\n  errorResponse \r\n} from '../common/utils.js';\r\n\r\n/**\r\n * Handle YouTube API requests\r\n */\r\nexport async function handleRequest(request, env, ctx) {\r\n  try {\r\n    // Try to get the user ID (will throw if unauthorized)\r\n    await getUserIdFromToken(request, env);\r\n    \r\n    // This is a placeholder implementation\r\n    return jsonResponse({ \r\n      message: 'YouTube API module is under development', \r\n      status: 'coming soon' \r\n    });\r\n  } catch (error) {\r\n    if (error.message === 'Unauthorized') {\r\n      return errorResponse('Unauthorized', 401);\r\n    }\r\n    \r\n    return errorResponse(error.message, 500);\r\n  }\r\n}\r\n", "/**\r\n * Creatorino API Worker\r\n * \r\n * Unified API entry point that routes requests to feature-specific handlers\r\n */\r\n\r\n// Import feature modules\r\nimport * as profileApi from './profile/index.js';\r\nimport * as youtubeApi from './youtube/index.js';\r\n// Import additional feature modules as they are developed\r\n\r\n// Import common utilities\r\nimport { errorResponse } from './common/utils.js';\r\n\r\n/**\r\n * Main request handler for the worker\r\n */\r\nasync function handleRequest(request, env, ctx) {\r\n  const url = new URL(request.url);\r\n  const path = url.pathname;\r\n  \r\n  // Global CORS handling for all routes\r\n  if (request.method === \"OPTIONS\") {\r\n    return new Response(null, {\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, OPTIONS\",\r\n        \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\",\r\n        \"Access-Control-Max-Age\": \"86400\",\r\n      }\r\n    });\r\n  }\r\n  \r\n  // Log incoming requests\r\n  console.log(`Processing ${request.method} request to ${path}`);\r\n  \r\n  // Route to the appropriate feature handler based on path\r\n  if (path.startsWith('/profile')) {\r\n    return profileApi.handleRequest(request, env, ctx);\r\n  } \r\n  else if (path.startsWith('/youtube')) {\r\n    return youtubeApi.handleRequest(request, env, ctx);\r\n  }\r\n  \r\n  // Default response for unmatched routes\r\n  return errorResponse('Not found', 404);\r\n}\r\n\r\n// Export an object with a fetch method (module format)\r\nexport default {\r\n  async fetch(request, env, ctx) {\r\n    return handleRequest(request, env, ctx);\r\n  }\r\n};", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\Users\\\\benja\\\\Repo\\\\creatorino.com\\\\cf-workers\\\\index.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\benja\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\benja\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\Users\\\\benja\\\\Repo\\\\creatorino.com\\\\cf-workers\\\\index.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\Users\\\\benja\\\\Repo\\\\creatorino.com\\\\cf-workers\\\\.wrangler\\\\tmp\\\\bundle-UQdGba\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\benja\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\Users\\\\benja\\\\Repo\\\\creatorino.com\\\\cf-workers\\\\.wrangler\\\\tmp\\\\bundle-UQdGba\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\Users\\\\benja\\\\Repo\\\\creatorino.com\\\\cf-workers\\\\.wrangler\\\\tmp\\\\bundle-UQdGba\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["handleRequest", "handleRequest"]
}
